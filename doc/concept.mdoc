# Agilka таскменеджер

Agilka - это легковесная система управления
задачами основанная на файлах и GIT-репозитории.

Agilka имеет ряд соглашений, которые позволяют ей
функционировать на минимальном уровне функционала и
допускает ее расширение до нужного уровня.

## Соглашения

- Все объекты преставленны JSON файлами лежащими в папках
- Пользователи системы - это пользователи GIT
- История изменения объектов хранится только в GIT
- Все текстовые значения в объектах описаны 
в формате Markdown (MDOC)
- Работа с объектами должна осуществляться только 
с помощью специальных инструментов
- Минимальными объетами являются таски и аттачи
- Если таск не соответствует минимальному описанию,
он считается не валидным
- На таски можно ссылаться через решотку `#` или `ticket:`
- На коммиты можно ссылаться через доллар `$` или `commit:`
- На Пользователя можно ссылаться через собаку `@` или `user:`
- При добавлении несоставного объекта он должен
иметь файл с расширением *.a<typeName>
- Несоставные объекты должны лежать в папках по 
названию типа, например tickets, comments, logs
- Ссылаться на состаные объекты можно также 
по типу `<objectType>:<objectAliace>`
- Если задаче не задается поле code - оно генерируется 
автоматически в виде числа
- Поля JSON файлов нужно писать сamelCase
- Все строчки начинающиеся с `//` в значениях 
полей являются комментариями и не учитываются 
в дальнейшем
- Все изменения хранятся в коммитах
- Всем изменениям (коммитам) можно задавать комментарий, либо комментарий будет сгенерирован автоматически
- Каждое атомарное изменение - это коммит по-умолчанию

## Инструменты

Все операции над Agilka-объектами должны производиться
с помощью консольных инструментов. Это обеспечит атомарность
и транзакционность операций.

Инструменты для Agilka консольные:

Создает проект в текущей директории
```
$ agilka init
```

Создать объект - все поля будут задаваться по очереди.
Code будет сгенерирован
```
$ agilka task create code=gooVal title='Hello world' --json='{"code": "gooBar"}'
```

Изменить все поля по очереди (в тестовом редакторе)
```
$ agilka task edit <objectAliace> fieldName=value
```

Изменить конкретное поле (в тестовом редакторе)
```
$ agilka task edit <objectAliace> -f fieldName
```

Перевести в todo
```
$ agilka task plan <objectAliace>
```

Перевести в process
```
$ agilka task start <objectAliace>
```

Перевести в complete
```
$ agilka task done <objectAliace>
```

Вывести все таски или таски в оперделеннойм состоянии
```
$ agilka task list [state1] ... [stateN]
```

Удалить объект
```
$ agilka task rm <objectAliace>
```

## Структура файлов

`/ticket/*.aticket`
`/attaches/**.*`
`/project_name.json`
`/.git`
`/.gitignore`

## Форматы

### Формат таска

Необходимый формат

```json
{
  "code": "ticketCodeName",
  "title": "Заголовок таска",
  "desc": "# Описание таска\nС поддержкой **mdoc**",
  "author": "gitUserName",
  "state": "backlog,todo,process,...,completed,...",
}
`

Допустимый формат (пример)

```json
{
  "code": "ticket_code_name",
  "title": "Заголовок таска",
  "desc": "# Описание таска\nС поддержкой **mdoc**",
  "parentTicket": "<ID/code>",
  "dublicatTicket": "<ID/code>",
  "blockedTicket": "<ID/code>",
  "author": "gitUserName",
  "assignTo": "gitUserName",
  "reportTo": "gitUserName",
  "state": "created",
  "attaches": "array_paths_or_path",
  "estimateTime": "5h",
  "logTimes": [
    { "long": "5h", "createAt": "TIMESTAMP", comment: "" }
  ],
  "comments": [
    {
      "createdAt": "TIMESTAMP",
      "text": "Comment text",
      "author": "gitUserName",
      "attaches": "array_paths_or_path"
    }
  ]
}
```

Конфигурационный файл проекта

```json
{
  "name": "Project Name",
  "repository": "Project GIT repository"
}
```